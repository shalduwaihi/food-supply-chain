Index: backend/contracts/supplyChain.sol
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\ncontract SupplyChain {\r\n    //Smart Contract owner will be the person who deploys the contract only he can authorize various roles like retailer, Manufacturer,etc\r\n    address public Owner;\r\n\r\n    // this constructor will be called when smart contract will be deployed on blockchain\r\n    constructor() public{\r\n        Owner = msg.sender;\r\n    }\r\n\r\n    //Roles (flow of Food supply chain)\r\n    // Supplier; //This is where Manufacturer will get raw materials to make products\r\n    // Transporter; //This is the middle man\r\n    // Manufacturer;  //Various WHO guidelines should be followed by this person\r\n    // Distributor; //This guy distributes the products to retailers\r\n    // Retailer; //Normal customer buys from the retailer\r\n\r\n    //modifier to make sure only the owner is using the function\r\n    modifier onlyByOwner() {\r\n        require(msg.sender == Owner);\r\n        _;\r\n    }\r\n\r\n    //stages of a product in Food supply chain\r\n    enum STAGE {\r\n        Init,\r\n        Supplier,\r\n        TransporterToManfacturer,\r\n        Manufacture,\r\n        TransporterToDistributor,\r\n        Distributor,\r\n        TransporterToRetailer,\r\n        Retailer\r\n    }\r\n    //using this we are going to track every single product the owner orders\r\n    //Product count\r\n    uint256 public productCtr = 0;\r\n    //Raw material supplier count\r\n    uint256 public rmsCtr = 0;\r\n    //Transporter count\r\n    uint256 public traCtr = 0;\r\n    //Manufacturer count\r\n    uint256 public manCtr = 0;\r\n    //distributor count\r\n    uint256 public disCtr = 0;\r\n    //retailer count\r\n    uint256 public retCtr = 0;\r\n\r\n    //To store information about the product\r\n    struct product {\r\n        uint256 id; //unique product id\r\n        string quantity; //product quantity\r\n        string description; // about product\r\n        string location; // product location\r\n        uint256 SUPPid; //id of the supplier for this particular product\r\n        uint256 TRAid; //id of the transporter for this particular product\r\n        uint256 MANid; //id of the Manufacturer for this particular product\r\n        uint256 DISid; //id of the distributor for this particular product\r\n        uint256 RETid; //id of the retailer for this particular product\r\n        STAGE stage; //current product stage\r\n    }\r\n\r\n    //To store all the product on the blockchain\r\n    mapping(uint256 => product) public ProductStock;\r\n\r\n    //To show status to client applications\r\n    function showStage(uint256 _productID)\r\n    public\r\n    view\r\n    returns (string memory)\r\n    {\r\n        require(productCtr > 0);\r\n        if (ProductStock[_productID].stage == STAGE.Init)\r\n            return \"Product Ordered\";\r\n        else if (ProductStock[_productID].stage == STAGE.Supplier)\r\n            return \"Supply Stage\";\r\n        else if (ProductStock[_productID].stage == STAGE.TransporterToManfacturer)\r\n            return \"Transporter To Manfacturer Stage\";\r\n        else if (ProductStock[_productID].stage == STAGE.Manufacture)\r\n            return \"Manufacturing Stage\";\r\n        else if (ProductStock[_productID].stage == STAGE.TransporterToDistributor)\r\n            return \"Transporter To Distributor Stage\";\r\n        else if (ProductStock[_productID].stage == STAGE.Distributor)\r\n            return \"Distribution Stage\";\r\n        else if (ProductStock[_productID].stage == STAGE.TransporterToRetailer)\r\n            return \"Transporter To Retailer Stage\";\r\n        else if (ProductStock[_productID].stage == STAGE.Retailer)\r\n            return \"Retail Stage\";\r\n\r\n    }\r\n\r\n    //To store information about  supplier\r\n    struct supplier {\r\n        address addr;\r\n        uint256 id; //user id\r\n        string fname; // first name\r\n        string lname; // last name\r\n        string role; //role of the user\r\n        string location; // user's location\r\n\r\n    }\r\n\r\n    //To store all the raw material suppliers on the blockchain\r\n    mapping(uint256 => supplier) public SUPP;\r\n\r\n    //To store information about transporter\r\n    struct transporter {\r\n        address addr;\r\n        uint256 id; //user id\r\n        string fname; // first name\r\n        string lname; // last name\r\n        string role; //role of the user\r\n        string location; // user's location\r\n    }\r\n\r\n    //To store all the transporters on the blockchain\r\n    mapping(uint256 => transporter) public TRA;\r\n\r\n\r\n    //To store information about manufacturer\r\n    struct manufacturer {\r\n        address addr;\r\n        uint256 id; //user id\r\n        string fname; // first name\r\n        string lname; // last name\r\n        string role; //role of the user\r\n        string location; // user's location\r\n    }\r\n\r\n    //To store all the manufacturers on the blockchain\r\n    mapping(uint256 => manufacturer) public MAN;\r\n\r\n    //To store information about distributor\r\n    struct distributor {\r\n        address addr;\r\n        uint256 id; //user id\r\n        string fname; // first name\r\n        string lname; // last name\r\n        string role; //role of the user\r\n        string location; // user's location\r\n    }\r\n\r\n    //To store all the distributors on the blockchain\r\n    mapping(uint256 => distributor) public DIS;\r\n\r\n    //To store information about retailer\r\n    struct retailer {\r\n        address addr;\r\n        uint256 id; //user id\r\n        string fname; // first name\r\n        string lname; // last name\r\n        string role; //role of the user\r\n        string location; // user's location\r\n    }\r\n\r\n    //To store all the retailers on the blockchain\r\n    mapping(uint256 => retailer) public RET;\r\n\r\n    //To add suppliers. Only contract owner can add a new supplier\r\n    function addSUPP(\r\n        address _addr,\r\n        uint256 _id,\r\n        string memory _fname,\r\n        string memory _lname,\r\n        string memory _role,\r\n        string memory _location\r\n    ) public onlyByOwner() {\r\n        rmsCtr++;\r\n        SUPP[rmsCtr] = supplier(_addr, _id, _fname, _lname, _role, _location);\r\n    }\r\n    //To add transporter. Only contract owner can add a new supplier\r\n    function addTRA(\r\n        address _addr,\r\n        uint256 _id,\r\n        string memory _fname,\r\n        string memory _lname,\r\n        string memory _role,\r\n        string memory _location\r\n    ) public onlyByOwner() {\r\n        rmsCtr++;\r\n        TRA[traCtr] = transporter(_addr, _id, _fname, _lname, _role, _location);\r\n    }\r\n\r\n    //To add manufacturer. Only contract owner can add a new manufacturer\r\n    function addManufacturer(\r\n        address _addr,\r\n        uint256 _id,\r\n        string memory _fname,\r\n        string memory _lname,\r\n        string memory _role,\r\n        string memory _location\r\n    ) public onlyByOwner() {\r\n        manCtr++;\r\n        MAN[manCtr] = manufacturer(_addr, _id, _fname, _lname, _role, _location);\r\n    }\r\n\r\n    //To add distributor. Only contract owner can add a new distributor\r\n    function addDistributor(\r\n        address _addr,\r\n        uint256 _id,\r\n        string memory _fname,\r\n        string memory _lname,\r\n        string memory _role,\r\n        string memory _location\r\n    ) public onlyByOwner() {\r\n        disCtr++;\r\n        DIS[disCtr] = distributor(_addr, _id, _fname, _lname, _role, _location);\r\n    }\r\n\r\n    //To add retailer. Only contract owner can add a new retailer\r\n    function addRetailer(\r\n        address _addr,\r\n        uint256 _id,\r\n        string memory _fname,\r\n        string memory _lname,\r\n        string memory _role,\r\n        string memory _location\r\n    ) public onlyByOwner() {\r\n        retCtr++;\r\n        RET[retCtr] = retailer(_addr, _id, _fname, _lname, _role, _location);\r\n    }\r\n\r\n    //To supply raw materials from supplier to the manufacturer by transporter\r\n    function supply(uint256 _productID) public {\r\n        require(_productID > 0 && _productID <= productCtr);\r\n        uint256 _id = findSUPP(msg.sender);\r\n        require(_id > 0);\r\n        require(ProductStock[_productID].stage == STAGE.Init);\r\n        ProductStock[_productID].TRAid = _id;\r\n        ProductStock[_productID].stage = STAGE.Supplier;\r\n    }\r\n\r\n    //To check if Supplier is available in the blockchain\r\n    function findSUPP(address _address) private view returns (uint256) {\r\n        require(rmsCtr > 0);\r\n        for (uint256 i = 1; i <= rmsCtr; i++) {\r\n            if (SUPP[i].addr == _address) return SUPP[i].id;\r\n        }\r\n        return 0;\r\n    }\r\n    //To supply raw materials from supplier to the manufacturer by transporter\r\n    function toManfacturer (uint256 _productID) public {\r\n        require(_productID > 0 && _productID <= productCtr);\r\n        uint256 _id = findTRA(msg.sender);\r\n        require(_id > 0);\r\n        require(ProductStock[_productID].stage == STAGE.Supplier);\r\n        ProductStock[_productID].TRAid = _id;\r\n        ProductStock[_productID].stage = STAGE.TransporterToManfacturer;\r\n    }\r\n\r\n    //To check if transporter is available in the blockchain\r\n    function findTRA(address _address) private view returns (uint256) {\r\n        require(traCtr > 0);\r\n        for (uint256 i = 1; i <= traCtr; i++) {\r\n            if (TRA[i].addr == _address) return TRA[i].id;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n\r\n    //To manufacture product\r\n    function Manufacturing(uint256 _productID) public {\r\n        require(_productID > 0 && _productID <= productCtr);\r\n        uint256 _id = findMAN(msg.sender);\r\n        require(_id > 0);\r\n        require(ProductStock[_productID].stage == STAGE.TransporterToManfacturer);\r\n        ProductStock[_productID].MANid = _id;\r\n        ProductStock[_productID].stage = STAGE.Manufacture;\r\n    }\r\n\r\n    //To check if Manufacturer is available in the blockchain\r\n    function findMAN(address _address) private view returns (uint256) {\r\n        require(manCtr > 0);\r\n        for (uint256 i = 1; i <= manCtr; i++) {\r\n            if (MAN[i].addr == _address) return MAN[i].id;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    //To supply product from Manufacturer to distributor by the transporter\r\n    function toDistributor(uint256 _productID) public {\r\n        require(_productID > 0 && _productID <= productCtr);\r\n        uint256 _id = findTRA(msg.sender);\r\n        require(_id > 0);\r\n        require(ProductStock[_productID].stage == STAGE.Manufacture);\r\n        ProductStock[_productID].DISid = _id;\r\n        ProductStock[_productID].stage = STAGE.TransporterToDistributor;\r\n    }\r\n\r\n    // To distribute product\r\n    function Distribution(uint256 _productID) public {\r\n        require(_productID > 0 && _productID <= productCtr);\r\n        uint256 _id = findDIS(msg.sender);\r\n        require(_id > 0);\r\n        require(ProductStock[_productID].stage == STAGE.TransporterToDistributor);\r\n        ProductStock[_productID].DISid = _id;\r\n        ProductStock[_productID].stage = STAGE.Distributor;\r\n    }\r\n    //To check if distributor is available in the blockchain\r\n    function findDIS(address _address) private view returns (uint256) {\r\n        require(disCtr > 0);\r\n        for (uint256 i = 1; i <= disCtr; i++) {\r\n            if (DIS[i].addr == _address) return DIS[i].id;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n\r\n    //To supply products from distributor to retailer\r\n    function toRetailer(uint256 _productID) public {\r\n        require(_productID > 0 && _productID <= productCtr);\r\n        uint256 _id = findTRA(msg.sender);\r\n        require(_id > 0);\r\n        require(ProductStock[_productID].stage == STAGE.Distributor);\r\n        ProductStock[_productID].RETid = _id;\r\n        ProductStock[_productID].stage = STAGE.TransporterToRetailer;\r\n    }\r\n    //To supply products from distributor to retailer\r\n    function Retail(uint256 _productID) public {\r\n        require(_productID > 0 && _productID <= productCtr);\r\n        uint256 _id = findRET(msg.sender);\r\n        require(_id > 0);\r\n        require(ProductStock[_productID].stage == STAGE.TransporterToRetailer);\r\n        ProductStock[_productID].RETid = _id;\r\n        ProductStock[_productID].stage = STAGE.Retailer;\r\n    }\r\n\r\n    //To check if retailer is available in the blockchain\r\n    function findRET(address _address) private view returns (uint256) {\r\n        require(retCtr > 0);\r\n        for (uint256 i = 1; i <= retCtr; i++) {\r\n            if (RET[i].addr == _address) return RET[i].id;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n\r\n\r\n    // To add new products to the stock\r\n    function addProduct(uint256 _id, string memory _quantity, string memory _description, string memory _location)\r\n    public\r\n    onlyByOwner()\r\n    {\r\n        require((rmsCtr > 0) && (manCtr > 0) && (disCtr > 0) && (retCtr > 0));\r\n        productCtr++;\r\n        ProductStock[productCtr] = product(\r\n            _id,\r\n            _quantity,\r\n            _description,\r\n            _location,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            STAGE.Init\r\n        );\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/contracts/supplyChain.sol b/backend/contracts/supplyChain.sol
--- a/backend/contracts/supplyChain.sol	(revision 4da0fbecbdb4cf83c897596e4f31dad2e2d97287)
+++ b/backend/contracts/supplyChain.sol	(date 1684361977891)
@@ -221,6 +221,7 @@
         retCtr++;
         RET[retCtr] = retailer(_addr, _id, _fname, _lname, _role, _location);
     }
+    
 
     //To supply raw materials from supplier to the manufacturer by transporter
     function supply(uint256 _productID) public {
